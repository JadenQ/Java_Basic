import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileOutStream;
import java.io.BufferedOutputStream;


public class BufferedCopyDemo{

	public static final String Filepath1 = "random/ok.jpg";
	public static final String Filepath2 = "random2/ok-copy.jpg";

	public static void main(String[] args) throws IOexception{
		long time = CopyFileBuffered(); //need a IOexception
		System.out.println("copy time" + time "ms");

	}

	/**
	计算利用缓冲装饰器进行复制粘贴所消耗的时间
	*/
	private static long CopyFileBuffered() throws FilenotFoundException{
		//文件对象 创建并检查是否存在
		File file = new File(Filepath1);
		if(!file.exists()){
			System.out.println("文件不存在，复制失败！");
			return 0;
		}
		//时间开始：
		long startTime = System.currentTimeMills();
		InputStream inStream = null;
		BufferedInputStream binStream = null;
		OutputStream outStream = null;
		BufferedOutputStream boutStream = null;

		inStream = new FileInputStream(file); // need throw a FilenotFoundException
		//装饰器buffer,以字节的形式读入
		binStream = new BufferedInputStream(inStream);
		outStream = new FileOutStream(Filepath2);
		boutStream = new BufferedOnputStream(outStream);
		//使用buffer,i是一个flag,i=-1时读入为空
		int i = -1;
		try{
			while((i = binStream.read()) != -1){
			boutStream.write(i);
			}
		}
		catch (IOexception e){
			e.printStackTrace(); //输出错误的stack
		}
		//finally最终要flush且关闭对象
		finally{
			try{
				boutStream.close(); //need IOException
				outStream.close();
				binStream.close();
				inStream.close();
			}
			catch(IOException e){
				e.printStackTrace();
			}

		}
		long endTime = System.currentTimeMills();


		return endTime - startTime;
	}

}