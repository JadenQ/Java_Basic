package booksystem.auth;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import booksystem.biz.BizFactory;
import booksystem.biz.BookInfoBiz;
import booksystem.biz.UserBiz;
import booksystem.biz.implement.BookInfoBizImp1;
import booksystem.entity.BookInfo;
import booksystem.entity.User;
import booksystem.exceptions.NoPermissionException;
import booksystem.util.FileUtil;

/**
 * 角色类
 * @todo TODO
 * @author Jaden
 * @date 2020年3月17日,上午8:49:53
 * @copyright Jaden
 */
public class Role implements Serializable{

	private static final long serialVersionUID = -3333276291539854775L;
	
	private String name;  //角色名称，显示给系统用户看的
	private String key;  //对应权限配置文件中的权限key，修改配置文件也可以修改用户的权限
	private List<String> permissions; //权限集合，保存在配置文件当中
	private BookInfoBiz bookInfoBiz;
	private UserBiz userBiz;
	
	
	public Role() {
		setName("默认角色");
		setKey("default");
		createPermissions(key);
		//bookInfoBiz = new BookInfoBizImp1(); //硬编码实现，可以改成工厂模式来获得子类实现
		//工厂模式：来料加工 传给工厂类（factory类）一个字符串，工厂类根据字符串返回相应的子类实现
		//可以放在biz包中
		bookInfoBiz = (BookInfoBiz)BizFactory.getBiz("bookInfoBiz");
		userBiz = (UserBiz)BizFactory.getBiz("userbiz");
	}
	
	/**
	 * 创建一个给定角色名称和权限key的角色对象
	 * 权限key对应一个字符串，我们将这个字符串分隔成数组，逐个赋值给permission集合
	 * @param name
	 * @param key
	 */
	public Role(String name, String key) {
		setName(name);
		setKey(key);
		createPermissions(key);
		bookInfoBiz = (BookInfoBiz)BizFactory.getBiz("bookInfoBiz");
	}

	private void createPermissions(String key) {
		//读取角色的权限集合：获得配置文件
		Properties props = new Properties();
		try {
			props.load(Role.class.getResourceAsStream("RolePermissions.properties"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String strPermission = props.getProperty(key); //administrator = bookinfobiz.*,userbiz.*
		if(null == permissions) permissions = new ArrayList<>();
		permissions.clear();
		//缺点：之后不能更改长度了
		//permissions.addAll(Arrays.asList(strPermission.split(",")));
		String[] permissionArray = strPermission.split(",");
		for(String permission : permissionArray) {
			if("".equals(permission)) continue; //某两个逗号之间是空
			permissions.add(permission.trim());
		}
	}
	

	
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getKey() {
		return key;
	}
	public void setKey(String key) {
		this.key = key;
	}
	public List<String> getPermissions() {
		return permissions;
	}
	public void setPermissions(List<String> permissions) {
		this.permissions = permissions;
	}
	public BookInfoBiz getBookInfoBiz() {
		return bookInfoBiz;
	}
	public void setBookInfoBiz(BookInfoBiz bookInfoBiz) {
		this.bookInfoBiz = bookInfoBiz;
	}
	/**
	 * 验证当前角色是否有权限执行传入的操作名（业务方法名）， bookinfobiz.add | bookinfobiz.instore
	 * @param optName
	 * @return
	 */
	private boolean checkPermission(String optName) {
		if(null == permissions || permissions.size() == 0) {
			return false;
		}
		//1.列出了一个个业务方法 bookinfobiz.add,bookinfobiz.del...
		//2.用*缩写： bookinfobiz.*
		for(String permission : permissions) {
			if(optName.equals(permission)) return true;
			if(permission.equals("bookinfobiz.*")&& optName.startsWith("bookinfobiz")) {
				return true;
			} 
			if(permission.equalsIgnoreCase("userbiz.*") && optName.startsWith("userbiz")) {
				return true;
			}
		}
		return false;
		
		
	}
	
	/**
	 * 是否登录
	 * @param user
	 * @return
	 */
	public boolean login(User user) {
		return userBiz.login(user);
		}
	
	//角色的入库方法：判断后调用业务类
	public boolean inStore(String isbn, int inCount) {
		//验证当前角色是否有权限执行入库操作
		if(checkPermission("bookinfobiz.instore")) {
			return bookInfoBiz.inStore(isbn, inCount);   
		}
		else{
			//不可以抛出异常or打印异常信息
			throw new NoPermissionException(name+"没有入库操作的权限");
		}
	}
	
	//出库
	public boolean outStore(String isbn, int outCount) {
		//验证当前角色是否有权限执行入库操作
		if(checkPermission("bookinfobiz.outstore")) {
			return bookInfoBiz.outStore(isbn, outCount); 
		}
		else{
			//不可以抛出异常or打印异常信息
			throw new NoPermissionException(name+"没有出库操作的权限");
		}
	}
	
}
